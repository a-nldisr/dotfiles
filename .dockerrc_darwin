#!/bin/bash

export DOCKER_REPO_USER=anldisr
export DOCKER_HERO=jess

set_xhost(){
xhost + $ip
}

set_display(){
export DISPLAY=$ip:0
}

set_display_ip(){
  # This interface is used in wired connections
  export ip=`ifconfig en7 | grep inet | awk '$1=="inet" {print $2}'`
  # If wired is not connected we check for internal range
  if [ -z ${ip} ]; then
    echo "ip is not set, trying 192 range"
    export ip=`ifconfig | grep 192| awk '$1=="inet" {print $2}'`
      if [ -z ${ip} ]; then
        echo "192 returned nothing, trying 10"
        export ip=`ifconfig | grep 10| awk '$1=="inet" {print $2}'`
      fi
      else
    echo ip is $ip
  fi
}

display_required(){
  echo "There is currently a bug in xquartz causing fatal io error 104 and more errors, tldr: GUI are not usuable at the moment"

  set_display_ip
  set_xhost
  set_display
}

# Credits: https://github.com/jessfraz/dotfiles
dcleanup(){
	local containers
	containers=( $(docker ps -aq 2>/dev/null) )
	docker rm "${containers[@]}" 2>/dev/null
	local volumes
	volumes=( $(docker ps --filter status=exited -q 2>/dev/null) )
	docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	images=( $(docker images --filter dangling=true -q 2>/dev/null) )
	docker rmi "${images[@]}" 2>/dev/null
}

del_stopped(){
	local name=$1
	local state
	state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

	if [[ "$state" == "false" ]]; then
		docker rm "$name"
	fi
}

relies_on(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}

# Containers

sublime(){
# Set the display
display_required
# Run Docker container
        docker run -d -it \
			-w $HOME/Documents \
			-v $HOME/.config/sublime-text-3:$HOME/.config/sublime-text-3 \
			-v $HOME/Documents:$HOME/Documents \
			-v $HOME/Git:$HOME/Git \
			-v /tmp/.X11-unix:/tmp/.X11-unix \
			-v $HOME/.local/share/recently-used.xbel:$HOME/.local/share/recently-used.xbel \
			-e DISPLAY=$ip:0 \
			-e NEWUSER=$USER \
			-e LANG=en_US.UTF-8 \
			${DOCKER_HERO}/sublime-text-3:latest
}

keepass2(){
        # Set the display
        display_required
        # Run Docker container related tasks
        del_stopped keepass2

        docker run -it \
                -v $HOME/.config:/root/ \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e DISPLAY=$DISPLAY \
                --name keepass2 \
		${DOCKER_HERO}/keepass2 "$@"
}
#                -v $HOME/.config/x508.key:/root/x508.key \
#		-v $HOME/.config/DB.kdb:/root/DB.kdb \
#		-v $HOME/.config/DB.kdbx:/root/DB.kdbx \
#		-v $HOME/.config/keepasssucks.xml:/root/keepasssucks.xml \

keypassxc(){
        # Set the display
        display_required
        # Run Docker container related tasks

	del_stopped keypassxc

	docker run -d \
                -v $HOME/.ssh:$HOME/.ssh:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
#		-v /usr/share/X11/xkb:/usr/share/X11/xkb:ro \
		-e "DISPLAY=$ip:0" \
		-v /etc/machine-id:/etc/machine-id:ro \
		--name keypassxc \
		${DOCKER_HERO}/keepassxc
}

mutt(){
	# subshell so we dont overwrite variables
	(
	local account=$1
	export IMAP_SERVER
	export SMTP_SERVER

	if [[ "$account" == "riseup" ]]; then
		export GMAIL=$MAIL_RISEUP
		export GMAIL_NAME=$MAIL_RISEUP_NAME
		export GMAIL_PASS=$MAIL_RISEUP_PASS
		export GMAIL_FROM=$MAIL_RISEUP_FROM
		IMAP_SERVER=mail.riseup.net
		SMTP_SERVER=$IMAP_SERVER
	fi

	docker run -it --rm \
		-e GMAIL \
		-e GMAIL_NAME \
		-e GMAIL_PASS \
		-e GMAIL_FROM \
		-e GPG_ID \
		-e IMAP_SERVER \
		-e SMTP_SERVER \
		-v "${HOME}/.gnupg:/home/user/.gnupg:ro" \
		--name "mutt-${account}" \
		${DOCKER_HERO}/mutt
	)
}

spotify(){
        # Set the display
        display_required
        # Run Docker container related tasks

	del_stopped spotify

	docker run -d \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-e QT_DEVICE_PIXEL_RATIO \
		--security-opt seccomp:unconfined \
		--device /dev/snd \
		--device /dev/dri \
		--group-add audio \
		--group-add video \
		--name spotify \
		${DOCKER_HERO}/spotify
}

gitsome(){
	docker run --rm -it \
		--name gitsome \
		--hostname gitsome \
		-v "${HOME}/.gitsomeconfig:/home/anon/.gitsomeconfig" \
		-v "${HOME}/.gitsomeconfigurl:/home/anon/.gitsomeconfigurl" \
                -v "${HOME}/Git:/Git" \
		${DOCKER_HERO}/gitsome
}

visualstudio(){
        # Set the display
        display_required
        # Run Docker container related tasks

	del_stopped visualstudio

	docker run -d \
		-v /tmp/.X11-unix:/tmp/.X11-unix  \
                -v "${HOME}/Git:/Git" \
                -v "${HOME}/Workplace:/Workplace" \
		-e "DISPLAY=${DISPLAY}" \
		--name visualstudio \
		${DOCKER_HERO}/vscode
}
alias vscode="visualstudio"

nmap(){
	docker run --rm -it \
		--net host \
		${DOCKER_HERO}/nmap "$@"
}

arping(){
	docker run --rm -it \
		--net host \
		arping "$@"
}

shellcheck(){
        docker run --rm -it \
                --net host \
                -v "$PWD:/mnt" \
                koalaman/shellcheck "$@"
}


#ansible-playbook(){
#        docker run --rm -it \
#                --net host \
#                        -w $HOME/Documents \
#                        -v $HOME/.config/sublime-text-3:$HOME/.config/sublime-text-3 \
#                        -v $HOME/Documents:$HOME/Documents \
#                        -v $HOME/Git:$HOME/Git \
#                        -v ${PWD}:${PWD}\
#                        -v $HOME/.ssh:/root/.ssh \
#                ansible "$@"
#
#}

export AURORA_VERSION=0.18.0

aurora(){
	docker run -it --rm \
		--log-driver none \
		--name aurora-tools \
		${DOCKER_REPO_USER}/aurora-tools:${AURORA_VERSION}.rpm aurora "$@"
          }

aurora_admin(){
	docker run -it --rm \
		--log-driver none \
		--name aurora-tools \
		${DOCKER_REPO_USER}/aurora-tools:${AURORA_VERSION}.rpm aurora_admin "$@"
          }
